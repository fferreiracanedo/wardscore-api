// =============================================================================
// WARDSCORE - PRISMA SCHEMA INICIAL
// =============================================================================
// Este é o schema inicial para o banco de dados
// Copie este conteúdo para prisma/schema.prisma após executar npx prisma init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// MODELS
// =============================================================================

model User {
  id        String   @id @default(cuid())
  riotId    String   @unique
  gameName  String
  tagLine   String
  avatarUrl String?
  isPro     Boolean  @default(false)
  region    String   @default("BR1")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  replays   Replay[]
  analyses  Analysis[]
  rankings  Ranking[]

  @@map("users")
}

model Replay {
  id          String      @id @default(cuid())
  matchId     String      @unique
  fileName    String
  originalName String
  fileSize    Int
  filePath    String
  gameMode    String?
  gameVersion String?
  duration    Int?        // em segundos
  status      ReplayStatus @default(UPLOADED)
  uploadedAt  DateTime    @default(now())
  processedAt DateTime?

  // Relacionamentos
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysis Analysis?

  @@map("replays")
}

model Analysis {
  id          String   @id @default(cuid())
  wardScore   Float
  rank        String   // S+, S, A+, A, B+, B, C
  gameStats   Json     // estatísticas do jogo
  insights    Json     // insights gerados
  suggestions Json     // sugestões de melhoria
  heatmapData Json?    // dados do heatmap
  createdAt   DateTime @default(now())

  // Relacionamentos
  replayId String @unique
  replay   Replay @relation(fields: [replayId], references: [id], onDelete: Cascade)
  
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analyses")
}

model Ranking {
  id          String   @id @default(cuid())
  wardScore   Float
  rank        Int
  region      String
  gamesPlayed Int      @default(1)
  lastUpdated DateTime @default(now())

  // Relacionamentos
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, region])
  @@map("rankings")
}

model Achievement {
  id          String            @id @default(cuid())
  title       String
  description String
  category    AchievementCategory
  rarity      AchievementRarity
  requirement Json              // { type: "score", value: 80 }
  reward      Json              // { xp: 100, badge: "ward_master" }
  icon        String
  createdAt   DateTime          @default(now())

  // Relacionamentos
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id          String    @id @default(cuid())
  progress    Int       @default(0) // 0-100
  unlockedAt  DateTime?
  createdAt   DateTime  @default(now())

  // Relacionamentos
  userId        String
  achievementId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// =============================================================================
// ENUMS
// =============================================================================

enum ReplayStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
}

enum AchievementCategory {
  WARD
  VISION
  IMPROVEMENT
  STREAK
  SPECIAL
}

enum AchievementRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

// =============================================================================
// INDICES PARA PERFORMANCE
// =============================================================================

// Adicionar após criar as tabelas:
// CREATE INDEX idx_replays_user_id ON replays(user_id);
// CREATE INDEX idx_analyses_user_id ON analyses(user_id);
// CREATE INDEX idx_rankings_region ON rankings(region);
// CREATE INDEX idx_rankings_ward_score ON rankings(ward_score DESC);
// CREATE INDEX idx_user_achievements_user_id ON user_achievements(user_id); 